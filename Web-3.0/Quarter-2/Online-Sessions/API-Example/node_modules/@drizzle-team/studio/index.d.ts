import { Relations, SQL, TablesRelationalConfig } from 'drizzle-orm';
import { AnyMySqlTable, MySqlDatabase } from 'drizzle-orm/mysql-core';
import { AnyPgTable, PgDatabase } from 'drizzle-orm/pg-core';
import { AnySQLiteTable, BaseSQLiteDatabase } from 'drizzle-orm/sqlite-core';
export type FilterOp = [string, string, any];
export type Filter = {
    and?: Filter[];
    or?: Filter[];
    op?: FilterOp;
};
export declare function filtersToSQL(filters: Filter): SQL | undefined;
export type Setup = {
    type: 'sqlite';
    db: BaseSQLiteDatabase<'async' | 'sync', any, Record<string, never>>;
    schema: Record<string, AnySQLiteTable | Relations>;
} | {
    type: 'mysql';
    db: MySqlDatabase<any, any>;
    schema: Record<string, AnyMySqlTable | Relations>;
} | {
    type: 'pg';
    db: PgDatabase<any, any>;
    schema: Record<string, AnyPgTable | Relations>;
};
export declare const queryEngineForSetup: (setup: Setup) => Promise<{
    query: (params: {
        table: string;
        columns: string[] | undefined;
        where: Filter | undefined;
        orderBy: {
            column: string;
            type: 'ASC' | 'DESC';
        } | undefined;
        limit: number;
        offset: number;
    }) => any;
    delete: (params: {
        table: string;
        where: Filter;
    }) => any;
    insert: (params: {
        table: string;
        data: Record<string, any>;
    }) => any;
    update: (params: {
        table: string;
        data: Record<string, any>;
        where: Filter;
    }) => any;
    tables: () => Promise<{
        name: string;
        columns: {
            name: string;
            type: string;
            _type: string;
        }[];
        count: any;
        primaryKeys: string[];
    }[]>;
    tablesConfig: {
        tables: TablesRelationalConfig;
        tableNamesMap: Record<string, string>;
    };
}>;
export declare const extractRelations: (tablesConfig: {
    tables: TablesRelationalConfig;
    tableNamesMap: Record<string, string>;
}) => {
    name: string;
    table: string;
    colmns: string[];
    refTable: string;
    refColumns: string[];
}[];
