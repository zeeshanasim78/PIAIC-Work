import { C as Column, e as entityKind, T as Table, V as View, A as AnyColumn, a as SQL } from './column.d-04875079.js';
export { $ as $Type, an as AnyTable, av as Assume, B as BuildColumn, o as BuildColumns, P as BuildQueryConfig, p as ChangeColumnTableName, K as Chunk, b as ColumnBaseConfig, n as ColumnBuilder, i as ColumnBuilderBaseConfig, m as ColumnBuilderExtraConfig, l as ColumnBuilderRuntimeConfig, k as ColumnBuilderTypeConfig, g as ColumnDataType, d as ColumnRuntimeConfig, c as ColumnTypeConfig, aJ as ColumnsSelection, aE as ColumnsWithTable, v as ConsoleLogWriter, w as DefaultLogger, h as Dialect, a2 as DriverValueDecoder, a3 as DriverValueEncoder, a7 as DriverValueMapper, D as DrizzleConfig, r as DrizzleEntity, s as DrizzleEntityClass, ax as DrizzleTypeError, aw as Equal, J as FakePrimitiveParam, G as GetColumnData, _ as GetDecoderResult, H as HasDefault, aA as IfThenElse, f as InferColumnsDataTypes, I as InferModel, ap as InferModelFromColumns, aH as IsAny, aF as KnownKeysOnly, u as LogWriter, L as Logger, j as MakeColumnConfig, M as MapColumnName, a0 as Name, x as NoopLogger, N as NotNull, ar as OneOrMany, O as OptionalKeyOnly, az as Or, a9 as Param, ad as Placeholder, aB as PromiseOf, Q as Query, W as QueryTypingsValue, R as RequiredKeyOnly, ab as SQLChunk, X as SQLWrapper, E as SelectedFields, y as SelectedFieldsFlat, z as SelectedFieldsFlatFull, F as SelectedFieldsOrdered, aj as SelectionProxyHandler, au as ShallowRecord, S as Simplify, at as SimplifyMappedType, Z as StringChunk, ah as Subquery, ag as SubqueryConfig, ak as TableConfig, as as Update, U as UpdateColConfig, aq as UpdateSet, al as UpdateTableConfig, ay as ValueOrArray, aI as ViewBaseConfig, ai as WithSubquery, aC as Writable, af as fillPlaceholders, aD as getTableColumns, ao as getTableName, q as hasOwnEntityKind, aG as iife, t as is, a4 as isDriverValueEncoder, Y as isSQLWrapper, am as isTable, a1 as name, a5 as noopDecoder, a6 as noopEncoder, a8 as noopMapper, aa as param, ae as placeholder, ac as sql } from './column.d-04875079.js';
import { a as Relation } from './query-promise.d-31db3408.js';
export { B as BinaryOperator, V as BuildQueryResult, S as BuildRelationResult, a3 as BuildRelationalQueryResult, K as DBQueryConfig, C as ExtractObjectValues, D as ExtractRelationsFromTableExtraConfigSchema, E as ExtractTableRelationsFromSchema, N as ExtractTablesWithRelations, J as FindTableByDBName, M as Many, U as NonUndefinedKeysOnly, $ as NormalizedRelation, O as One, G as Operators, I as OrderByOperators, Q as QueryPromise, W as RelationConfig, R as RelationalSchemaConfig, z as Relations, P as ReturnTypeOrValue, L as TableRelationalConfig, a2 as TableRelationsHelpers, A as TableRelationsKeysOnly, T as TablesRelationalConfig, c as and, x as asc, r as between, b as bindIfParam, _ as createMany, Z as createOne, a1 as createTableRelationsHelpers, y as desc, e as eq, p as exists, X as extractTablesRelationalConfig, F as getOperators, H as getOrderByOperators, g as gt, f as gte, v as ilike, i as inArray, m as isNotNull, k as isNull, t as like, l as lt, h as lte, a4 as mapRelationalRow, n as ne, a0 as normalizeRelation, d as not, s as notBetween, q as notExists, w as notIlike, j as notInArray, u as notLike, o as or, Y as relations } from './query-promise.d-31db3408.js';

declare class ColumnAliasProxyHandler<TColumn extends Column> implements ProxyHandler<TColumn> {
    private table;
    static readonly [entityKind]: string;
    constructor(table: Table | View);
    get(columnObj: TColumn, prop: string | symbol): any;
}
declare class TableAliasProxyHandler<T extends Table | View> implements ProxyHandler<T> {
    private alias;
    private replaceOriginalName;
    static readonly [entityKind]: string;
    constructor(alias: string, replaceOriginalName: boolean);
    get(target: T, prop: string | symbol): any;
}
declare class RelationTableAliasProxyHandler<T extends Relation> implements ProxyHandler<T> {
    private alias;
    static readonly [entityKind]: string;
    constructor(alias: string);
    get(target: T, prop: string | symbol): any;
}
declare function aliasedTable<T extends Table>(table: T, tableAlias: string): T;
declare function aliasedRelation<T extends Relation>(relation: T, tableAlias: string): T;
declare function aliasedTableColumn<T extends AnyColumn>(column: T, tableAlias: string): T;
declare function mapColumnsInAliasedSQLToAlias(query: SQL.Aliased, alias: string): SQL.Aliased;
declare function mapColumnsInSQLToAlias(query: SQL, alias: string): SQL;

declare class DrizzleError extends Error {
    static readonly [entityKind]: string;
    constructor(message: string);
    static wrap(error: unknown, message?: string): DrizzleError;
}
declare class TransactionRollbackError extends DrizzleError {
    static readonly [entityKind]: string;
    constructor();
}

export { AnyColumn, Column, ColumnAliasProxyHandler, DrizzleError, Relation, RelationTableAliasProxyHandler, SQL, Table, TableAliasProxyHandler, TransactionRollbackError, View, aliasedRelation, aliasedTable, aliasedTableColumn, entityKind, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias };
