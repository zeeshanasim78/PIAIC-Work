import { M as MySqlViewBase, B as BuildAliasTable, m as mysqlView, a as MySqlView } from '../select.types.d-b0925107.js';
export { A as AnyMySqlInsertConfig, n as AnyMySqlSelect, J as Join, p as JoinFn, s as LockConfig, L as LockStrength, Y as ManualViewBuilder, D as Mode, b as MySqlDatabase, e as MySqlDelete, d as MySqlDeleteConfig, c as MySqlDialect, i as MySqlInsert, h as MySqlInsertBuilder, f as MySqlInsertConfig, g as MySqlInsertValue, l as MySqlSelect, j as MySqlSelectBuilder, o as MySqlSelectConfig, w as MySqlSelectHKT, t as MySqlSelectHKTBase, u as MySqlSelectKind, k as MySqlSelectQueryBuilder, v as MySqlSelectQueryBuilderHKT, N as MySqlSession, O as MySqlTransaction, K as MySqlTransactionConfig, C as MySqlUpdate, z as MySqlUpdateBuilder, x as MySqlUpdateConfig, y as MySqlUpdateSetSource, Z as MySqlViewConfig, _ as MySqlViewWithSelection, I as PreparedQuery, P as PreparedQueryConfig, G as PreparedQueryHKT, R as PreparedQueryHKTBase, H as PreparedQueryKind, Q as QueryBuilder, E as QueryResultHKT, F as QueryResultKind, q as SelectedFields, S as SelectedFieldsFlat, r as SelectedFieldsOrdered, T as SubqueryWithSelection, X as ViewBuilder, V as ViewBuilderConfig, U as ViewBuilderCore, W as WithSubqueryWithSelection } from '../select.types.d-b0925107.js';
import { i as ColumnBuilderBaseConfig, bu as MySqlColumnBuilderWithAutoIncrement, e as entityKind, b as ColumnBaseConfig, bv as MySqlColumnWithAutoIncrement, bj as MySqlColumnBuilder, bw as MySqlColumn, aC as Writable, bh as AnyMySqlTable, aw as Equal, a as SQL, N as NotNull, H as HasDefault, g as ColumnDataType, m as ColumnBuilderExtraConfig, bk as MySqlTable, bx as MySqlTableFn, by as Index, bz as ForeignKey, bA as Check, bB as PrimaryKey, bC as UniqueConstraint, E as SelectedFields, A as AnyColumn, T as Table, ak as TableConfig, C as Column } from '../column.d-04875079.js';
export { bK as AnyForeignKeyBuilder, bP as AnyIndexBuilder, bi as AnyMySqlColumn, bD as CheckBuilder, bJ as ForeignKeyBuilder, bL as GetColumnsTable, bR as GetColumnsTableName, bQ as IndexBuilder, bO as IndexBuilderOn, bN as IndexColumn, bG as MySqlColumnWithAutoIncrementConfig, b_ as MySqlTableExtraConfig, bl as MySqlTableWithColumns, bV as PrimaryKeyBuilder, bI as Reference, bF as ReferenceConfig, b$ as TableConfig, bY as UniqueConstraintBuilder, bZ as UniqueOnConstraintBuilder, bH as UpdateDeleteAction, bE as check, bM as foreignKey, bS as index, c1 as mysqlTable, c2 as mysqlTableCreator, c0 as mysqlTableWithSchema, bU as primaryKey, bW as unique, bT as uniqueIndex, bX as uniqueKeyName } from '../column.d-04875079.js';
import '../select.types.d-f5caa4d6.js';
import '../query-promise.d-31db3408.js';
import 'mysql2/promise';
import '../migrator.js';

type MySqlBigInt53BuilderInitial<TName extends string> = MySqlBigInt53Builder<{
    name: TName;
    dataType: 'number';
    columnType: 'MySqlBigInt53';
    data: number;
    driverParam: number | string;
    enumValues: undefined;
}>;
declare class MySqlBigInt53Builder<T extends ColumnBuilderBaseConfig<'number', 'MySqlBigInt53'>> extends MySqlColumnBuilderWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    constructor(name: T['name']);
}
declare class MySqlBigInt53<T extends ColumnBaseConfig<'number', 'MySqlBigInt53'>> extends MySqlColumnWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    getSQLType(): string;
    mapFromDriverValue(value: number | string): number;
}
type MySqlBigInt64BuilderInitial<TName extends string> = MySqlBigInt64Builder<{
    name: TName;
    dataType: 'bigint';
    columnType: 'MySqlBigInt64';
    data: bigint;
    driverParam: string;
    enumValues: undefined;
}>;
declare class MySqlBigInt64Builder<T extends ColumnBuilderBaseConfig<'bigint', 'MySqlBigInt64'>> extends MySqlColumnBuilderWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    constructor(name: T['name']);
}
declare class MySqlBigInt64<T extends ColumnBaseConfig<'bigint', 'MySqlBigInt64'>> extends MySqlColumnWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    getSQLType(): string;
    mapFromDriverValue(value: string): bigint;
}
interface MySqlBigIntConfig<T extends 'number' | 'bigint' = 'number' | 'bigint'> {
    mode: T;
}
declare function bigint<TName extends string, TMode extends MySqlBigIntConfig['mode']>(name: TName, config: MySqlBigIntConfig<TMode>): TMode extends 'number' ? MySqlBigInt53BuilderInitial<TName> : MySqlBigInt64BuilderInitial<TName>;

type MySqlBinaryBuilderInitial<TName extends string> = MySqlBinaryBuilder<{
    name: TName;
    dataType: 'string';
    columnType: 'MySqlBinary';
    data: string;
    driverParam: string;
    enumValues: undefined;
}>;
declare class MySqlBinaryBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlBinary'>> extends MySqlColumnBuilder<T, MySqlBinaryConfig> {
    static readonly [entityKind]: string;
    constructor(name: T['name'], length: number | undefined);
}
declare class MySqlBinary<T extends ColumnBaseConfig<'string', 'MySqlBinary'>> extends MySqlColumn<T, MySqlBinaryConfig> {
    static readonly [entityKind]: string;
    length: number | undefined;
    getSQLType(): string;
}
interface MySqlBinaryConfig {
    length?: number;
}
declare function binary<TName extends string>(name: TName, config?: MySqlBinaryConfig): MySqlBinaryBuilderInitial<TName>;

type MySqlBooleanBuilderInitial<TName extends string> = MySqlBooleanBuilder<{
    name: TName;
    dataType: 'boolean';
    columnType: 'MySqlBoolean';
    data: boolean;
    driverParam: number | boolean;
    enumValues: undefined;
}>;
declare class MySqlBooleanBuilder<T extends ColumnBuilderBaseConfig<'boolean', 'MySqlBoolean'>> extends MySqlColumnBuilder<T> {
    static readonly [entityKind]: string;
    constructor(name: T['name']);
}
declare class MySqlBoolean<T extends ColumnBaseConfig<'boolean', 'MySqlBoolean'>> extends MySqlColumn<T> {
    static readonly [entityKind]: string;
    getSQLType(): string;
    mapFromDriverValue(value: number | boolean): boolean;
}
declare function boolean<TName extends string>(name: TName): MySqlBooleanBuilderInitial<TName>;

type MySqlCharBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = MySqlCharBuilder<{
    name: TName;
    dataType: 'string';
    columnType: 'MySqlChar';
    data: TEnum[number];
    driverParam: number | string;
    enumValues: TEnum;
}>;
declare class MySqlCharBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlChar'>> extends MySqlColumnBuilder<T, MySqlCharConfig<T['enumValues']>> {
    static readonly [entityKind]: string;
    constructor(name: T['name'], config: MySqlCharConfig<T['enumValues']>);
}
declare class MySqlChar<T extends ColumnBaseConfig<'string', 'MySqlChar'>> extends MySqlColumn<T, MySqlCharConfig<T['enumValues']>> {
    static readonly [entityKind]: string;
    readonly length: number | undefined;
    readonly enumValues: T["enumValues"] | undefined;
    getSQLType(): string;
}
interface MySqlCharConfig<TEnum extends readonly string[] | string[] | undefined> {
    length?: number;
    enum?: TEnum;
}
declare function char<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(name: TName, config?: MySqlCharConfig<T | Writable<T>>): MySqlCharBuilderInitial<TName, Writable<T>>;

type ConvertCustomConfig<TName extends string, T extends Partial<CustomTypeValues>> = {
    name: TName;
    dataType: 'custom';
    columnType: 'MySqlCustomColumn';
    data: T['data'];
    driverParam: T['driverData'];
    enumValues: undefined;
} & (T['notNull'] extends true ? {
    notNull: true;
} : {}) & (T['default'] extends true ? {
    hasDefault: true;
} : {});
interface MySqlCustomColumnInnerConfig {
    customTypeValues: CustomTypeValues;
}
declare class MySqlCustomColumnBuilder<T extends ColumnBuilderBaseConfig<'custom', 'MySqlCustomColumn'>> extends MySqlColumnBuilder<T, {
    fieldConfig: CustomTypeValues['config'];
    customTypeParams: CustomTypeParams<any>;
}, {
    mysqlColumnBuilderBrand: 'MySqlCustomColumnBuilderBrand';
}> {
    static readonly [entityKind]: string;
    constructor(name: T['name'], fieldConfig: CustomTypeValues['config'], customTypeParams: CustomTypeParams<any>);
}
declare class MySqlCustomColumn<T extends ColumnBaseConfig<'custom', 'MySqlCustomColumn'>> extends MySqlColumn<T> {
    static readonly [entityKind]: string;
    private sqlName;
    private mapTo?;
    private mapFrom?;
    constructor(table: AnyMySqlTable<{
        name: T['tableName'];
    }>, config: MySqlCustomColumnBuilder<T>['config']);
    getSQLType(): string;
    mapFromDriverValue(value: T['driverParam']): T['data'];
    mapToDriverValue(value: T['data']): T['driverParam'];
}
type CustomTypeValues = {
    /**
     * Required type for custom column, that will infer proper type model
     *
     * Examples:
     *
     * If you want your column to be `string` type after selecting/or on inserting - use `data: string`. Like `text`, `varchar`
     *
     * If you want your column to be `number` type after selecting/or on inserting - use `data: number`. Like `integer`
     */
    data: unknown;
    /**
     * Type helper, that represents what type database driver is accepting for specific database data type
     */
    driverData?: unknown;
    /**
     * What config type should be used for {@link CustomTypeParams} `dataType` generation
     */
    config?: unknown;
    /**
     * Whether the config argument should be required or not
     * @default false
     */
    configRequired?: boolean;
    /**
     * If your custom data type should be notNull by default you can use `notNull: true`
     *
     * @example
     * const customSerial = customType<{ data: number, notNull: true, default: true }>({
     * 	  dataType() {
     * 	    return 'serial';
     *    },
     * });
     */
    notNull?: boolean;
    /**
     * If your custom data type has default you can use `default: true`
     *
     * @example
     * const customSerial = customType<{ data: number, notNull: true, default: true }>({
     * 	  dataType() {
     * 	    return 'serial';
     *    },
     * });
     */
    default?: boolean;
};
interface CustomTypeParams<T extends CustomTypeValues> {
    /**
     * Database data type string representation, that is used for migrations
     * @example
     * ```
     * `jsonb`, `text`
     * ```
     *
     * If database data type needs additional params you can use them from `config` param
     * @example
     * ```
     * `varchar(256)`, `numeric(2,3)`
     * ```
     *
     * To make `config` be of specific type please use config generic in {@link CustomTypeValues}
     *
     * @example
     * Usage example
     * ```
     *   dataType() {
     *     return 'boolean';
     *   },
     * ```
     * Or
     * ```
     *   dataType(config) {
     * 	   return typeof config.length !== 'undefined' ? `varchar(${config.length})` : `varchar`;
     * 	 }
     * ```
     */
    dataType: (config: T['config'] | (Equal<T['configRequired'], true> extends true ? never : undefined)) => string;
    /**
     * Optional mapping function, between user input and driver
     * @example
     * For example, when using jsonb we need to map JS/TS object to string before writing to database
     * ```
     * toDriver(value: TData): string {
     * 	 return JSON.stringify(value);
     * }
     * ```
     */
    toDriver?: (value: T['data']) => T['driverData'] | SQL;
    /**
     * Optional mapping function, that is responsible for data mapping from database to JS/TS code
     * @example
     * For example, when using timestamp we need to map string Date representation to JS Date
     * ```
     * fromDriver(value: string): Date {
     * 	return new Date(value);
     * },
     * ```
     */
    fromDriver?: (value: T['driverData']) => T['data'];
}
/**
 * Custom mysql database data type generator
 */
declare function customType<T extends CustomTypeValues = CustomTypeValues>(customTypeParams: CustomTypeParams<T>): Equal<T['configRequired'], true> extends true ? <TName extends string>(dbName: TName, fieldConfig: T['config']) => MySqlCustomColumnBuilder<ConvertCustomConfig<TName, T>> : <TName extends string>(dbName: TName, fieldConfig?: T['config']) => MySqlCustomColumnBuilder<ConvertCustomConfig<TName, T>>;

type MySqlDateBuilderInitial<TName extends string> = MySqlDateBuilder<{
    name: TName;
    dataType: 'date';
    columnType: 'MySqlDate';
    data: Date;
    driverParam: string | number;
    enumValues: undefined;
}>;
declare class MySqlDateBuilder<T extends ColumnBuilderBaseConfig<'date', 'MySqlDate'>> extends MySqlColumnBuilder<T> {
    static readonly [entityKind]: string;
    constructor(name: T['name']);
}
declare class MySqlDate<T extends ColumnBaseConfig<'date', 'MySqlDate'>> extends MySqlColumn<T> {
    static readonly [entityKind]: string;
    constructor(table: AnyMySqlTable<{
        name: T['tableName'];
    }>, config: MySqlDateBuilder<T>['config']);
    getSQLType(): string;
    mapFromDriverValue(value: string): Date;
}
type MySqlDateStringBuilderInitial<TName extends string> = MySqlDateStringBuilder<{
    name: TName;
    dataType: 'string';
    columnType: 'MySqlDateString';
    data: string;
    driverParam: string | number;
    enumValues: undefined;
}>;
declare class MySqlDateStringBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlDateString'>> extends MySqlColumnBuilder<T> {
    static readonly [entityKind]: string;
    constructor(name: T['name']);
}
declare class MySqlDateString<T extends ColumnBaseConfig<'string', 'MySqlDateString'>> extends MySqlColumn<T> {
    static readonly [entityKind]: string;
    constructor(table: AnyMySqlTable<{
        name: T['tableName'];
    }>, config: MySqlDateStringBuilder<T>['config']);
    getSQLType(): string;
}
interface MySqlDateConfig<TMode extends 'date' | 'string' = 'date' | 'string'> {
    mode?: TMode;
}
declare function date<TName extends string, TMode extends MySqlDateConfig['mode'] & {}>(name: TName, config?: MySqlDateConfig<TMode>): Equal<TMode, 'string'> extends true ? MySqlDateStringBuilderInitial<TName> : MySqlDateBuilderInitial<TName>;

type MySqlDateTimeBuilderInitial<TName extends string> = MySqlDateTimeBuilder<{
    name: TName;
    dataType: 'date';
    columnType: 'MySqlDateTime';
    data: Date;
    driverParam: string | number;
    enumValues: undefined;
}>;
declare class MySqlDateTimeBuilder<T extends ColumnBuilderBaseConfig<'date', 'MySqlDateTime'>> extends MySqlColumnBuilder<T, MySqlDatetimeConfig> {
    static readonly [entityKind]: string;
    constructor(name: T['name'], config: MySqlDatetimeConfig | undefined);
}
declare class MySqlDateTime<T extends ColumnBaseConfig<'date', 'MySqlDateTime'>> extends MySqlColumn<T> {
    static readonly [entityKind]: string;
    readonly fsp: number | undefined;
    constructor(table: AnyMySqlTable<{
        name: T['tableName'];
    }>, config: MySqlDateTimeBuilder<T>['config']);
    getSQLType(): string;
    mapFromDriverValue(value: string): Date;
}
type MySqlDateTimeStringBuilderInitial<TName extends string> = MySqlDateTimeStringBuilder<{
    name: TName;
    dataType: 'string';
    columnType: 'MySqlDateTimeString';
    data: string;
    driverParam: string | number;
    enumValues: undefined;
}>;
declare class MySqlDateTimeStringBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlDateTimeString'>> extends MySqlColumnBuilder<T, MySqlDatetimeConfig> {
    static readonly [entityKind]: string;
    constructor(name: T['name'], config: MySqlDatetimeConfig | undefined);
}
declare class MySqlDateTimeString<T extends ColumnBaseConfig<'string', 'MySqlDateTimeString'>> extends MySqlColumn<T> {
    static readonly [entityKind]: string;
    readonly fsp: number | undefined;
    constructor(table: AnyMySqlTable<{
        name: T['tableName'];
    }>, config: MySqlDateTimeStringBuilder<T>['config']);
    getSQLType(): string;
}
type DatetimeFsp = 0 | 1 | 2 | 3 | 4 | 5 | 6;
interface MySqlDatetimeConfig<TMode extends 'date' | 'string' = 'date' | 'string'> {
    mode?: TMode;
    fsp?: DatetimeFsp;
}
declare function datetime<TName extends string, TMode extends MySqlDatetimeConfig['mode'] & {}>(name: TName, config?: MySqlDatetimeConfig<TMode>): Equal<TMode, 'string'> extends true ? MySqlDateTimeStringBuilderInitial<TName> : MySqlDateTimeBuilderInitial<TName>;

type MySqlDecimalBuilderInitial<TName extends string> = MySqlDecimalBuilder<{
    name: TName;
    dataType: 'string';
    columnType: 'MySqlDecimal';
    data: string;
    driverParam: string;
    enumValues: undefined;
}>;
declare class MySqlDecimalBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlDecimal'>> extends MySqlColumnBuilderWithAutoIncrement<T, MySqlDecimalConfig> {
    static readonly [entityKind]: string;
    constructor(name: T['name'], precision?: number, scale?: number);
}
declare class MySqlDecimal<T extends ColumnBaseConfig<'string', 'MySqlDecimal'>> extends MySqlColumnWithAutoIncrement<T, MySqlDecimalConfig> {
    static readonly [entityKind]: string;
    readonly precision: number | undefined;
    readonly scale: number | undefined;
    getSQLType(): string;
}
interface MySqlDecimalConfig {
    precision?: number;
    scale?: number;
}
declare function decimal<TName extends string>(name: TName, config?: MySqlDecimalConfig): MySqlDecimalBuilderInitial<TName>;

type MySqlDoubleBuilderInitial<TName extends string> = MySqlDoubleBuilder<{
    name: TName;
    dataType: 'number';
    columnType: 'MySqlDouble';
    data: number;
    driverParam: number | string;
    enumValues: undefined;
}>;
declare class MySqlDoubleBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlDouble'>> extends MySqlColumnBuilderWithAutoIncrement<T, MySqlDoubleConfig> {
    static readonly [entityKind]: string;
    constructor(name: T['name'], config: MySqlDoubleConfig | undefined);
}
declare class MySqlDouble<T extends ColumnBaseConfig<'number', 'MySqlDouble'>> extends MySqlColumnWithAutoIncrement<T, MySqlDoubleConfig> {
    static readonly [entityKind]: string;
    precision: number | undefined;
    scale: number | undefined;
    getSQLType(): string;
}
interface MySqlDoubleConfig {
    precision?: number;
    scale?: number;
}
declare function double<TName extends string>(name: TName, config?: MySqlDoubleConfig): MySqlDoubleBuilderInitial<TName>;

type MySqlEnumColumnBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = MySqlEnumColumnBuilder<{
    name: TName;
    dataType: 'string';
    columnType: 'MySqlEnumColumn';
    data: TEnum[number];
    driverParam: string;
    enumValues: TEnum;
}>;
declare class MySqlEnumColumnBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlEnumColumn'>> extends MySqlColumnBuilder<T, {
    enumValues: T['enumValues'];
}> {
    static readonly [entityKind]: string;
    constructor(name: T['name'], values: T['enumValues']);
}
declare class MySqlEnumColumn<T extends ColumnBaseConfig<'string', 'MySqlEnumColumn'>> extends MySqlColumn<T, {
    enumValues: T['enumValues'];
}> {
    static readonly [entityKind]: string;
    readonly enumValues: T["enumValues"];
    getSQLType(): string;
}
declare function mysqlEnum<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(name: TName, values: T | Writable<T>): MySqlEnumColumnBuilderInitial<TName, Writable<T>>;

type MySqlFloatBuilderInitial<TName extends string> = MySqlFloatBuilder<{
    name: TName;
    dataType: 'number';
    columnType: 'MySqlFloat';
    data: number;
    driverParam: number | string;
    enumValues: undefined;
}>;
declare class MySqlFloatBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlFloat'>> extends MySqlColumnBuilderWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    constructor(name: T['name']);
}
declare class MySqlFloat<T extends ColumnBaseConfig<'number', 'MySqlFloat'>> extends MySqlColumnWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    getSQLType(): string;
}
declare function float<TName extends string>(name: TName): MySqlFloatBuilderInitial<TName>;

type MySqlIntBuilderInitial<TName extends string> = MySqlIntBuilder<{
    name: TName;
    dataType: 'number';
    columnType: 'MySqlInt';
    data: number;
    driverParam: number | string;
    enumValues: undefined;
}>;
declare class MySqlIntBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlInt'>> extends MySqlColumnBuilderWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    constructor(name: T['name']);
}
declare class MySqlInt<T extends ColumnBaseConfig<'number', 'MySqlInt'>> extends MySqlColumnWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    getSQLType(): string;
    mapFromDriverValue(value: number | string): number;
}
declare function int<TName extends string>(name: TName): MySqlIntBuilderInitial<TName>;

type MySqlJsonBuilderInitial<TName extends string> = MySqlJsonBuilder<{
    name: TName;
    dataType: 'json';
    columnType: 'MySqlJson';
    data: unknown;
    driverParam: string;
    enumValues: undefined;
}>;
declare class MySqlJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'MySqlJson'>> extends MySqlColumnBuilder<T> {
    static readonly [entityKind]: string;
    constructor(name: T['name']);
}
declare class MySqlJson<T extends ColumnBaseConfig<'json', 'MySqlJson'>> extends MySqlColumn<T> {
    static readonly [entityKind]: string;
    getSQLType(): string;
    mapToDriverValue(value: T['data']): string;
}
declare function json<TName extends string>(name: TName): MySqlJsonBuilderInitial<TName>;

type MySqlMediumIntBuilderInitial<TName extends string> = MySqlMediumIntBuilder<{
    name: TName;
    dataType: 'number';
    columnType: 'MySqlMediumInt';
    data: number;
    driverParam: number | string;
    enumValues: undefined;
}>;
declare class MySqlMediumIntBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlMediumInt'>> extends MySqlColumnBuilderWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    constructor(name: T['name']);
}
declare class MySqlMediumInt<T extends ColumnBaseConfig<'number', 'MySqlMediumInt'>> extends MySqlColumnWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    getSQLType(): string;
    mapFromDriverValue(value: number | string): number;
}
declare function mediumint<TName extends string>(name: TName): MySqlMediumIntBuilderInitial<TName>;

type MySqlRealBuilderInitial<TName extends string> = MySqlRealBuilder<{
    name: TName;
    dataType: 'number';
    columnType: 'MySqlReal';
    data: number;
    driverParam: number | string;
    enumValues: undefined;
}>;
declare class MySqlRealBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlReal'>> extends MySqlColumnBuilderWithAutoIncrement<T, MySqlRealConfig> {
    static readonly [entityKind]: string;
    constructor(name: T['name'], config: MySqlRealConfig | undefined);
}
declare class MySqlReal<T extends ColumnBaseConfig<'number', 'MySqlReal'>> extends MySqlColumnWithAutoIncrement<T, MySqlRealConfig> {
    static readonly [entityKind]: string;
    precision: number | undefined;
    scale: number | undefined;
    getSQLType(): string;
}
interface MySqlRealConfig {
    precision?: number;
    scale?: number;
}
declare function real<TName extends string>(name: TName, config?: MySqlRealConfig): MySqlRealBuilderInitial<TName>;

type MySqlSerialBuilderInitial<TName extends string> = NotNull<HasDefault<MySqlSerialBuilder<{
    name: TName;
    dataType: 'number';
    columnType: 'MySqlSerial';
    data: number;
    driverParam: number;
    enumValues: undefined;
}>>>;
declare class MySqlSerialBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlSerial'>> extends MySqlColumnBuilderWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    constructor(name: T['name']);
}
declare class MySqlSerial<T extends ColumnBaseConfig<'number', 'MySqlSerial'>> extends MySqlColumnWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    getSQLType(): string;
    mapFromDriverValue(value: number | string): number;
}
declare function serial<TName extends string>(name: TName): MySqlSerialBuilderInitial<TName>;

type MySqlSmallIntBuilderInitial<TName extends string> = MySqlSmallIntBuilder<{
    name: TName;
    dataType: 'number';
    columnType: 'MySqlSmallInt';
    data: number;
    driverParam: number | string;
    enumValues: undefined;
}>;
declare class MySqlSmallIntBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlSmallInt'>> extends MySqlColumnBuilderWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    constructor(name: T['name']);
}
declare class MySqlSmallInt<T extends ColumnBaseConfig<'number', 'MySqlSmallInt'>> extends MySqlColumnWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    getSQLType(): string;
    mapFromDriverValue(value: number | string): number;
}
declare function smallint<TName extends string>(name: TName): MySqlSmallIntBuilderInitial<TName>;

type MySqlTextColumnType = 'tinytext' | 'text' | 'mediumtext' | 'longtext';
type MySqlTextBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = MySqlTextBuilder<{
    name: TName;
    dataType: 'string';
    columnType: 'MySqlText';
    data: TEnum[number];
    driverParam: string;
    enumValues: TEnum;
}>;
declare class MySqlTextBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlText'>> extends MySqlColumnBuilder<T, {
    textType: MySqlTextColumnType;
    enumValues: T['enumValues'];
}> {
    static readonly [entityKind]: string;
    constructor(name: T['name'], textType: MySqlTextColumnType, config: MySqlTextConfig<T['enumValues']>);
}
declare class MySqlText<T extends ColumnBaseConfig<'string', 'MySqlText'>> extends MySqlColumn<T, {
    textType: MySqlTextColumnType;
    enumValues: T['enumValues'];
}> {
    static readonly [entityKind]: string;
    private textType;
    readonly enumValues: T["enumValues"];
    getSQLType(): string;
}
interface MySqlTextConfig<TEnum extends readonly string[] | string[] | undefined> {
    enum?: TEnum;
}
declare function text<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(name: TName, config?: MySqlTextConfig<T | Writable<T>>): MySqlTextBuilderInitial<TName, Writable<T>>;
declare function tinytext<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(name: TName, config?: MySqlTextConfig<T | Writable<T>>): MySqlTextBuilderInitial<TName, Writable<T>>;
declare function mediumtext<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(name: TName, config?: MySqlTextConfig<T | Writable<T>>): MySqlTextBuilderInitial<TName, Writable<T>>;
declare function longtext<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(name: TName, config?: MySqlTextConfig<T | Writable<T>>): MySqlTextBuilderInitial<TName, Writable<T>>;

type MySqlTimeBuilderInitial<TName extends string> = MySqlTimeBuilder<{
    name: TName;
    dataType: 'string';
    columnType: 'MySqlTime';
    data: string;
    driverParam: string | number;
    enumValues: undefined;
}>;
declare class MySqlTimeBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlTime'>> extends MySqlColumnBuilder<T, TimeConfig> {
    static readonly [entityKind]: string;
    constructor(name: T['name'], config: TimeConfig | undefined);
}
declare class MySqlTime<T extends ColumnBaseConfig<'string', 'MySqlTime'>> extends MySqlColumn<T, TimeConfig> {
    static readonly [entityKind]: string;
    readonly fsp: number | undefined;
    getSQLType(): string;
}
type TimeConfig = {
    fsp?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
};
declare function time<TName extends string>(name: TName, config?: TimeConfig): MySqlTimeBuilderInitial<TName>;

interface MySqlDateColumnBaseConfig {
    hasOnUpdateNow: boolean;
}
declare abstract class MySqlDateColumnBaseBuilder<T extends ColumnBuilderBaseConfig<ColumnDataType, string>, TRuntimeConfig extends object = object, TExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig> extends MySqlColumnBuilder<T, TRuntimeConfig & MySqlDateColumnBaseConfig, TExtraConfig> {
    static readonly [entityKind]: string;
    defaultNow(): HasDefault<this>;
    onUpdateNow(): HasDefault<this>;
}
declare abstract class MySqlDateBaseColumn<T extends ColumnBaseConfig<ColumnDataType, string>, TRuntimeConfig extends object = object> extends MySqlColumn<T, MySqlDateColumnBaseConfig & TRuntimeConfig> {
    static readonly [entityKind]: string;
    readonly hasOnUpdateNow: boolean;
}

type MySqlTimestampBuilderInitial<TName extends string> = MySqlTimestampBuilder<{
    name: TName;
    dataType: 'date';
    columnType: 'MySqlTimestamp';
    data: Date;
    driverParam: string | number;
    enumValues: undefined;
}>;
declare class MySqlTimestampBuilder<T extends ColumnBuilderBaseConfig<'date', 'MySqlTimestamp'>> extends MySqlDateColumnBaseBuilder<T, MySqlTimestampConfig> {
    static readonly [entityKind]: string;
    constructor(name: T['name'], config: MySqlTimestampConfig | undefined);
}
declare class MySqlTimestamp<T extends ColumnBaseConfig<'date', 'MySqlTimestamp'>> extends MySqlDateBaseColumn<T, MySqlTimestampConfig> {
    static readonly [entityKind]: string;
    readonly fsp: number | undefined;
    getSQLType(): string;
    mapFromDriverValue(value: string): Date;
    mapToDriverValue(value: Date): string;
}
type MySqlTimestampStringBuilderInitial<TName extends string> = MySqlTimestampStringBuilder<{
    name: TName;
    dataType: 'string';
    columnType: 'MySqlTimestampString';
    data: string;
    driverParam: string | number;
    enumValues: undefined;
}>;
declare class MySqlTimestampStringBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlTimestampString'>> extends MySqlDateColumnBaseBuilder<T, MySqlTimestampConfig> {
    static readonly [entityKind]: string;
    constructor(name: T['name'], config: MySqlTimestampConfig | undefined);
}
declare class MySqlTimestampString<T extends ColumnBaseConfig<'string', 'MySqlTimestampString'>> extends MySqlDateBaseColumn<T, MySqlTimestampConfig> {
    static readonly [entityKind]: string;
    readonly fsp: number | undefined;
    getSQLType(): string;
}
type TimestampFsp = 0 | 1 | 2 | 3 | 4 | 5 | 6;
interface MySqlTimestampConfig<TMode extends 'string' | 'date' = 'string' | 'date'> {
    mode?: TMode;
    fsp?: TimestampFsp;
}
declare function timestamp<TName extends string, TMode extends MySqlTimestampConfig['mode'] & {}>(name: TName, config?: MySqlTimestampConfig<TMode>): Equal<TMode, 'string'> extends true ? MySqlTimestampStringBuilderInitial<TName> : MySqlTimestampBuilderInitial<TName>;

type MySqlTinyIntBuilderInitial<TName extends string> = MySqlTinyIntBuilder<{
    name: TName;
    dataType: 'number';
    columnType: 'MySqlTinyInt';
    data: number;
    driverParam: number | string;
    enumValues: undefined;
}>;
declare class MySqlTinyIntBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlTinyInt'>> extends MySqlColumnBuilderWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    constructor(name: T['name']);
}
declare class MySqlTinyInt<T extends ColumnBaseConfig<'number', 'MySqlTinyInt'>> extends MySqlColumnWithAutoIncrement<T> {
    static readonly [entityKind]: string;
    getSQLType(): string;
    mapFromDriverValue(value: number | string): number;
}
declare function tinyint<TName extends string>(name: TName): MySqlTinyIntBuilderInitial<TName>;

type MySqlVarBinaryBuilderInitial<TName extends string> = MySqlVarBinaryBuilder<{
    name: TName;
    dataType: 'string';
    columnType: 'MySqlVarBinary';
    data: string;
    driverParam: string;
    enumValues: undefined;
}>;
declare class MySqlVarBinaryBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlVarBinary'>> extends MySqlColumnBuilder<T, MySqlVarbinaryOptions> {
    static readonly [entityKind]: string;
}
declare class MySqlVarBinary<T extends ColumnBaseConfig<'string', 'MySqlVarBinary'>> extends MySqlColumn<T, MySqlVarbinaryOptions> {
    static readonly [entityKind]: string;
    length: number | undefined;
    getSQLType(): string;
}
interface MySqlVarbinaryOptions {
    length: number;
}
declare function varbinary<TName extends string>(name: TName, options: MySqlVarbinaryOptions): MySqlVarBinaryBuilderInitial<TName>;

type MySqlVarCharBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = MySqlVarCharBuilder<{
    name: TName;
    dataType: 'string';
    columnType: 'MySqlVarChar';
    data: TEnum[number];
    driverParam: number | string;
    enumValues: TEnum;
}>;
declare class MySqlVarCharBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlVarChar'>> extends MySqlColumnBuilder<T, MySqlVarCharConfig<T['enumValues']>> {
    static readonly [entityKind]: string;
}
declare class MySqlVarChar<T extends ColumnBaseConfig<'string', 'MySqlVarChar'>> extends MySqlColumn<T, MySqlVarCharConfig<T['enumValues']>> {
    static readonly [entityKind]: string;
    readonly length: number | undefined;
    readonly enumValues: T["enumValues"] | undefined;
    getSQLType(): string;
}
interface MySqlVarCharConfig<TEnum extends string[] | readonly string[] | undefined> {
    length: number;
    enum?: TEnum;
}
declare function varchar<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(name: TName, config: MySqlVarCharConfig<T | Writable<T>>): MySqlVarCharBuilderInitial<TName, Writable<T>>;

type MySqlYearBuilderInitial<TName extends string> = MySqlYearBuilder<{
    name: TName;
    dataType: 'number';
    columnType: 'MySqlYear';
    data: number;
    driverParam: number;
    enumValues: undefined;
}>;
declare class MySqlYearBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlYear'>> extends MySqlColumnBuilder<T> {
    static readonly [entityKind]: string;
    constructor(name: T['name']);
}
declare class MySqlYear<T extends ColumnBaseConfig<'number', 'MySqlYear'>> extends MySqlColumn<T> {
    static readonly [entityKind]: string;
    getSQLType(): string;
}
declare function year<TName extends string>(name: TName): MySqlYearBuilderInitial<TName>;

declare function alias<TTable extends MySqlTable | MySqlViewBase, TAlias extends string>(table: TTable, alias: TAlias): BuildAliasTable<TTable, TAlias>;

declare class MySqlSchema<TName extends string = string> {
    readonly schemaName: TName;
    static readonly [entityKind]: string;
    constructor(schemaName: TName);
    table: MySqlTableFn<TName>;
    view: typeof mysqlView;
}
/** @deprecated - use `instanceof MySqlSchema` */
declare function isMySqlSchema(obj: unknown): obj is MySqlSchema;
/**
 * Create a MySQL schema.
 * https://dev.mysql.com/doc/refman/8.0/en/create-database.html
 *
 * @param name mysql use schema name
 * @returns MySQL schema
 */
declare function mysqlDatabase<TName extends string>(name: TName): MySqlSchema<TName>;
/**
 * @see mysqlDatabase
 */
declare const mysqlSchema: typeof mysqlDatabase;

declare function getTableConfig(table: AnyMySqlTable): {
    columns: MySqlColumn<ColumnBaseConfig<ColumnDataType, string>, object>[];
    indexes: Index[];
    foreignKeys: ForeignKey[];
    checks: Check[];
    primaryKeys: PrimaryKey[];
    uniqueConstraints: UniqueConstraint[];
    name: string;
    schema: string | undefined;
    baseName: string;
};
declare function getViewConfig<TName extends string = string, TExisting extends boolean = boolean>(view: MySqlView<TName, TExisting>): {
    algorithm?: "undefined" | "merge" | "temptable" | undefined;
    definer?: string | undefined;
    sqlSecurity?: "definer" | "invoker" | undefined;
    withCheckOption?: "local" | "cascaded" | undefined;
    name: TName;
    originalName: TName;
    schema: string | undefined;
    selectedFields: SelectedFields<AnyColumn, Table<TableConfig<Column<any, object, object>>>>;
    isExisting: TExisting;
    query: TExisting extends true ? undefined : SQL<unknown>;
    isAlias: boolean;
};

export { AnyMySqlTable, BuildAliasTable, Check, ConvertCustomConfig, CustomTypeParams, CustomTypeValues, DatetimeFsp, ForeignKey, Index, MySqlBigInt53, MySqlBigInt53Builder, MySqlBigInt53BuilderInitial, MySqlBigInt64, MySqlBigInt64Builder, MySqlBigInt64BuilderInitial, MySqlBinary, MySqlBinaryBuilder, MySqlBinaryBuilderInitial, MySqlBinaryConfig, MySqlBoolean, MySqlBooleanBuilder, MySqlBooleanBuilderInitial, MySqlChar, MySqlCharBuilder, MySqlCharBuilderInitial, MySqlCharConfig, MySqlColumn, MySqlColumnBuilder, MySqlColumnBuilderWithAutoIncrement, MySqlColumnWithAutoIncrement, MySqlCustomColumn, MySqlCustomColumnBuilder, MySqlCustomColumnInnerConfig, MySqlDate, MySqlDateBuilder, MySqlDateBuilderInitial, MySqlDateConfig, MySqlDateString, MySqlDateStringBuilder, MySqlDateStringBuilderInitial, MySqlDateTime, MySqlDateTimeBuilder, MySqlDateTimeBuilderInitial, MySqlDateTimeString, MySqlDateTimeStringBuilder, MySqlDateTimeStringBuilderInitial, MySqlDatetimeConfig, MySqlDecimal, MySqlDecimalBuilder, MySqlDecimalBuilderInitial, MySqlDecimalConfig, MySqlDouble, MySqlDoubleBuilder, MySqlDoubleBuilderInitial, MySqlDoubleConfig, MySqlEnumColumn, MySqlEnumColumnBuilder, MySqlEnumColumnBuilderInitial, MySqlFloat, MySqlFloatBuilder, MySqlFloatBuilderInitial, MySqlInt, MySqlIntBuilder, MySqlIntBuilderInitial, MySqlJson, MySqlJsonBuilder, MySqlJsonBuilderInitial, MySqlMediumInt, MySqlMediumIntBuilder, MySqlMediumIntBuilderInitial, MySqlReal, MySqlRealBuilder, MySqlRealBuilderInitial, MySqlRealConfig, MySqlSchema, MySqlSerial, MySqlSerialBuilder, MySqlSerialBuilderInitial, MySqlSmallInt, MySqlSmallIntBuilder, MySqlSmallIntBuilderInitial, MySqlTable, MySqlTableFn, MySqlText, MySqlTextBuilder, MySqlTextBuilderInitial, MySqlTextColumnType, MySqlTextConfig, MySqlTime, MySqlTimeBuilder, MySqlTimeBuilderInitial, MySqlTimestamp, MySqlTimestampBuilder, MySqlTimestampBuilderInitial, MySqlTimestampConfig, MySqlTimestampString, MySqlTimestampStringBuilder, MySqlTimestampStringBuilderInitial, MySqlTinyInt, MySqlTinyIntBuilder, MySqlTinyIntBuilderInitial, MySqlVarBinary, MySqlVarBinaryBuilder, MySqlVarBinaryBuilderInitial, MySqlVarChar, MySqlVarCharBuilder, MySqlVarCharBuilderInitial, MySqlVarCharConfig, MySqlVarbinaryOptions, MySqlView, MySqlViewBase, MySqlYear, MySqlYearBuilder, MySqlYearBuilderInitial, PrimaryKey, TimeConfig, TimestampFsp, UniqueConstraint, alias, bigint, binary, boolean, char, customType, date, datetime, decimal, double, float, getTableConfig, getViewConfig, int, isMySqlSchema, json, longtext, mediumint, mediumtext, mysqlDatabase, mysqlEnum, mysqlSchema, mysqlView, real, serial, smallint, text, time, timestamp, tinyint, tinytext, varbinary, varchar, year };
