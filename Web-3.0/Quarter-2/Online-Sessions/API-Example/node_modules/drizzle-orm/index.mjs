import { e as entityKind } from './alias-7164ff43.mjs';
export { bP as BaseName, p as Column, b5 as ColumnAliasProxyHandler, C as ColumnBuilder, bN as Columns, D as DrizzleError, bR as ExtraConfigBuilder, bA as FakePrimitiveParam, bQ as IsAlias, M as Many, bD as Name, O as One, bO as OriginalName, b as Param, bJ as Placeholder, Q as QueryPromise, bv as Relation, b6 as RelationTableAliasProxyHandler, bw as Relations, S as SQL, bM as Schema, j as SelectionProxyHandler, bC as StringChunk, v as Subquery, w as SubqueryConfig, T as Table, n as TableAliasProxyHandler, bL as TableName, l as TransactionRollbackError, r as View, V as ViewBaseConfig, W as WithSubquery, b7 as aliasedRelation, H as aliasedTable, x as aliasedTableColumn, F as and, I as applyMixins, bt as asc, bn as between, b9 as bindIfParam, bz as createMany, by as createOne, c as createTableRelationsHelpers, bu as desc, G as eq, bl as exists, a as extractTablesRelationalConfig, f as fillPlaceholders, y as getOperators, B as getOrderByOperators, q as getTableColumns, K as getTableLikeName, u as getTableName, bd as gt, be as gte, b8 as hasOwnEntityKind, bT as iife, br as ilike, bh as inArray, i as is, bF as isDriverValueEncoder, bk as isNotNull, bj as isNull, bB as isSQLWrapper, bS as isTable, bp as like, bf as lt, bg as lte, A as mapColumnsInAliasedSQLToAlias, z as mapColumnsInSQLToAlias, g as mapRelationalRow, m as mapResultRow, d as mapUpdateSet, bE as name, ba as ne, bG as noopDecoder, bH as noopEncoder, bI as noopMapper, E as normalizeRelation, bc as not, bo as notBetween, bm as notExists, bs as notIlike, bi as notInArray, bq as notLike, bb as or, o as orderSelectedFields, L as param, bK as placeholder, bx as relations, s as sql } from './alias-7164ff43.mjs';

class ConsoleLogWriter {
    static [entityKind] = 'ConsoleLogWriter';
    write(message) {
        console.log(message);
    }
}
class DefaultLogger {
    static [entityKind] = 'DefaultLogger';
    writer;
    constructor(config) {
        this.writer = config?.writer ?? new ConsoleLogWriter();
    }
    logQuery(query, params) {
        const stringifiedParams = params.map((p) => {
            try {
                return JSON.stringify(p);
            }
            catch {
                return String(p);
            }
        });
        const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(', ')}]` : '';
        this.writer.write(`Query: ${query}${paramsStr}`);
    }
}
class NoopLogger {
    static [entityKind] = 'NoopLogger';
    logQuery() {
        // noop
    }
}

export { ConsoleLogWriter, DefaultLogger, NoopLogger, entityKind };
//# sourceMappingURL=index.mjs.map
